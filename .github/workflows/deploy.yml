name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        cd backend
        pytest tests/ -v

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ec2-user
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "$SSH_PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Create directory (no chown needed - ec2-user owns their home dir)
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} "mkdir -p /home/ec2-user/app"
        
        # Copy files to EC2
        scp -i private_key.pem -o StrictHostKeyChecking=no -r backend/* ${EC2_USER}@${EC2_HOST}:/home/ec2-user/app/
        
        # Deploy application
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} << 'EOF'
          cd /home/ec2-user/app
          pip3 install --user -r requirements.txt
          
          # Stop existing process
          pkill -f "gunicorn" || true
          
          # Create log directory if it doesn't exist
          mkdir -p ~/logs
          
          # Start application with gunicorn
          nohup ~/.local/bin/gunicorn -w 4 -b 0.0.0.0:5000 app:app > ~/logs/flask-app.log 2>&1 &
        EOF
        
        rm -f private_key.pem